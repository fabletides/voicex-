
#include <Arduino.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include <driver/i2s.h>
#include <esp_task_wdt.h>

// TensorFlow Lite –¥–ª—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
#include "tensorflow/lite/micro/all_ops_resolver.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "tensorflow/lite/schema/schema_generated.h"

// –ü–∏–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
#define I2S_WS_PIN          25
#define I2S_SCK_PIN         26
#define I2S_SD_PIN          22
#define VIBRO_MOTOR_1_PIN   33
#define VIBRO_MOTOR_2_PIN   32
#define LED_STATUS_PIN      2
#define BUTTON_PIN          0

// –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#define SAMPLE_RATE         22050
#define CHANNELS            1
#define BITS_PER_SAMPLE     16
#define BUFFER_SIZE         1024
#define FEATURE_SIZE        512    // –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML
#define OUTPUT_SIZE         256    // –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

// ML –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#define TENSOR_ARENA_SIZE   50000  // –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è TensorFlow Lite
#define MODEL_FILE_PATH     "/model.tflite"
#define CONFIG_FILE_PATH    "/config.json"

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
enum SystemState {
    STATE_INIT,
    STATE_READY,
    STATE_RECORDING,
    STATE_PROCESSING,
    STATE_PLAYING,
    STATE_ERROR
};

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
struct AudioBuffer {
    int16_t* data;
    size_t size;
    size_t write_index;
    size_t read_index;
    bool full;
};

struct MLConfig {
    float input_scale;
    int input_zero_point;
    float output_scale;
    int output_zero_point;
    int model_version;
    String user_id;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SystemState current_state = STATE_INIT;
AudioBuffer input_buffer;
AudioBuffer output_buffer;
MLConfig ml_config;

// TensorFlow Lite –æ–±—ä–µ–∫—Ç—ã
const tflite::Model* tflite_model = nullptr;
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* input_tensor = nullptr;
TfLiteTensor* output_tensor = nullptr;
tflite::MicroErrorReporter micro_error_reporter;
uint8_t tensor_arena[TENSOR_ARENA_SIZE] __attribute__((aligned(16)));

// –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏
QueueHandle_t audio_input_queue;
QueueHandle_t feature_queue;
QueueHandle_t output_queue;

// –ú—å—é—Ç–µ–∫—Å—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
SemaphoreHandle_t ml_mutex;
SemaphoreHandle_t spiffs_mutex;

// –¢–∞—Å–∫–∏
TaskHandle_t audio_input_task_handle;
TaskHandle_t feature_extraction_task_handle;
TaskHandle_t ml_inference_task_handle;
TaskHandle_t audio_output_task_handle;

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
bool init_spiffs() {
    Serial.println("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIFFS...");
    
    if (!SPIFFS.begin(true)) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SPIFFS");
        return false;
    }
    
    Serial.printf("üìÅ SPIFFS: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è %d –∏–∑ %d –±–∞–π—Ç\n", 
                  SPIFFS.usedBytes(), SPIFFS.totalBytes());
    
    return true;
}

bool load_ml_config() {
    Serial.println("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML...");
    
    xSemaphoreTake(spiffs_mutex, portMAX_DELAY);
    
    if (!SPIFFS.exists(CONFIG_FILE_PATH)) {
        Serial.println("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π");
        create_default_config();
    }
    
    File config_file = SPIFFS.open(CONFIG_FILE_PATH, "r");
    if (!config_file) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        xSemaphoreGive(spiffs_mutex);
        return false;
    }
    
    String config_content = config_file.readString();
    config_file.close();
    xSemaphoreGive(spiffs_mutex);
    
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, config_content);
    
    if (error) {
        Serial.printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s\n", error.c_str());
        return false;
    }
    
    ml_config.input_scale = doc["input_scale"] | 1.0f;
    ml_config.input_zero_point = doc["input_zero_point"] | 0;
    ml_config.output_scale = doc["output_scale"] | 1.0f;
    ml_config.output_zero_point = doc["output_zero_point"] | 0;
    ml_config.model_version = doc["model_version"] | 1;
    ml_config.user_id = doc["user_id"] | "default_user";
    
    Serial.println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    return true;
}

void create_default_config() {
    DynamicJsonDocument doc(1024);
    doc["input_scale"] = 1.0f;
    doc["input_zero_point"] = 0;
    doc["output_scale"] = 1.0f;
    doc["output_zero_point"] = 0;
    doc["model_version"] = 1;
    doc["user_id"] = "default_user";
    
    File config_file = SPIFFS.open(CONFIG_FILE_PATH, "w");
    if (config_file) {
        serializeJson(doc, config_file);
        config_file.close();
        Serial.println("‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
}

bool load_tflite_model() {
    Serial.println("üß† –ó–∞–≥—Ä—É–∑–∫–∞ TensorFlow Lite –º–æ–¥–µ–ª–∏...");
    
    xSemaphoreTake(spiffs_mutex, portMAX_DELAY);
    
    if (!SPIFFS.exists(MODEL_FILE_PATH)) {
        Serial.println("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SPIFFS");
        Serial.println("üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ model.tflite –≤ SPIFFS —á–µ—Ä–µ–∑:");
        Serial.println("   - ESP32 Sketch Data Upload");
        Serial.println("   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
        Serial.println("   - OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        xSemaphoreGive(spiffs_mutex);
        return false;
    }
    
    File model_file = SPIFFS.open(MODEL_FILE_PATH, "r");
    if (!model_file) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏");
        xSemaphoreGive(spiffs_mutex);
        return false;
    }
    
    size_t model_size = model_file.size();
    Serial.printf("üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: %d –±–∞–π—Ç\n", model_size);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å
    uint8_t* model_data = (uint8_t*)ps_malloc(model_size);
    if (!model_data) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏");
        model_file.close();
        xSemaphoreGive(spiffs_mutex);
        return false;
    }
    
    model_file.read(model_data, model_size);
    model_file.close();
    xSemaphoreGive(spiffs_mutex);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TensorFlow Lite
    tflite_model = tflite::GetModel(model_data);
    if (tflite_model->version() != TFLITE_SCHEMA_VERSION) {
        Serial.printf("‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –º–æ–¥–µ–ª–∏: %d (–æ–∂–∏–¥–∞–µ—Ç—Å—è %d)\n",
                     tflite_model->version(), TFLITE_SCHEMA_VERSION);
        return false;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    static tflite::MicroMutableOpResolver<10> resolver;
    resolver.AddFullyConnected();
    resolver.AddRelu();
    resolver.AddSoftmax();
    resolver.AddReshape();
    resolver.AddQuantize();
    resolver.AddDequantize();
    resolver.AddConv2D();
    resolver.AddDepthwiseConv2D();
    resolver.AddAveragePool2D();
    resolver.AddMaxPool2D();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
    static tflite::MicroInterpreter static_interpreter(
        tflite_model, resolver, tensor_arena, TENSOR_ARENA_SIZE, &micro_error_reporter);
    interpreter = &static_interpreter;
    
    // –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–æ–≤
    TfLiteStatus allocate_status = interpreter->AllocateTensors();
    if (allocate_status != kTfLiteOk) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–Ω–∑–æ—Ä–æ–≤");
        return false;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—Ö–æ–¥–Ω—ã–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã
    input_tensor = interpreter->input(0);
    output_tensor = interpreter->output(0);
    
    Serial.printf("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n");
    Serial.printf("   –í—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: [%d, %d]\n", 
                  input_tensor->dims->data[0], input_tensor->dims->data[1]);
    Serial.printf("   –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: [%d, %d]\n", 
                  output_tensor->dims->data[0], output_tensor->dims->data[1]);
    
    return true;
}

bool init_i2s() {
    Serial.println("üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2S...");
    
    i2s_config_t i2s_config = {
        .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        .communication_format = I2S_COMM_FORMAT_STAND_I2S,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 8,
        .dma_buf_len = BUFFER_SIZE,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };
    
    i2s_pin_config_t pin_config = {
        .bck_io_num = I2S_SCK_PIN,
        .ws_io_num = I2S_WS_PIN,
        .data_out_num = I2S_PIN_NO_CHANGE,
        .data_in_num = I2S_SD_PIN
    };
    
    esp_err_t result = i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
    if (result != ESP_OK) {
        Serial.printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ I2S –¥—Ä–∞–π–≤–µ—Ä–∞: %s\n", esp_err_to_name(result));
        return false;
    }
    
    result = i2s_set_pin(I2S_NUM_0, &pin_config);
    if (result != ESP_OK) {
        Serial.printf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–æ–≤ I2S: %s\n", esp_err_to_name(result));
        return false;
    }
    
    Serial.println("‚úÖ I2S –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    return true;
}

bool init_audio_buffers() {
    Serial.println("üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–æ–≤...");
    
    input_buffer.size = BUFFER_SIZE * 4; // 4 —Å–µ–∫—É–Ω–¥—ã –±—É—Ñ–µ—Ä–∞
    input_buffer.data = (int16_t*)ps_malloc(input_buffer.size * sizeof(int16_t));
    if (!input_buffer.data) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞");
        return false;
    }
    
    output_buffer.size = BUFFER_SIZE * 4;
    output_buffer.data = (int16_t*)ps_malloc(output_buffer.size * sizeof(int16_t));
    if (!output_buffer.data) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞");
        return false;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–æ–≤
    memset(input_buffer.data, 0, input_buffer.size * sizeof(int16_t));
    memset(output_buffer.data, 0, output_buffer.size * sizeof(int16_t));
    
    input_buffer.write_index = 0;
    input_buffer.read_index = 0;
    input_buffer.full = false;
    
    output_buffer.write_index = 0;
    output_buffer.read_index = 0;
    output_buffer.full = false;
    
    Serial.println("‚úÖ –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    return true;
}

bool init_vibro_motors() {
    Serial.println("üì≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤...");
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PWM –¥–ª—è –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤
    ledcSetup(0, 1000, 8); // –ö–∞–Ω–∞–ª 0, 1kHz, 8-bit —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    ledcSetup(1, 1000, 8); // –ö–∞–Ω–∞–ª 1, 1kHz, 8-bit —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    
    ledcAttachPin(VIBRO_MOTOR_1_PIN, 0);
    ledcAttachPin(VIBRO_MOTOR_2_PIN, 1);
    
    // –¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    ledcWrite(0, 128);
    ledcWrite(1, 128);
    delay(200);
    ledcWrite(0, 0);
    ledcWrite(1, 0);
    
    Serial.println("‚úÖ –í–∏–±—Ä–æ–º–æ—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    return true;
}

bool init_queues_and_mutexes() {
    Serial.println("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –∏ –º—å—é—Ç–µ–∫—Å–æ–≤...");
    
    audio_input_queue = xQueueCreate(10, sizeof(AudioBuffer*));
    feature_queue = xQueueCreate(5, sizeof(float*));
    output_queue = xQueueCreate(5, sizeof(float*));
    
    ml_mutex = xSemaphoreCreateMutex();
    spiffs_mutex = xSemaphoreCreateMutex();
    
    if (!audio_input_queue || !feature_queue || !output_queue || 
        !ml_mutex || !spiffs_mutex) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π/–º—å—é—Ç–µ–∫—Å–æ–≤");
        return false;
    }
    
    Serial.println("‚úÖ –û—á–µ—Ä–µ–¥–∏ –∏ –º—å—é—Ç–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã");
    return true;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª–∞
void extract_features(int16_t* audio_data, size_t length, float* features) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ESP32
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç FFT, MFCC –∏ –¥—Ä—É–≥–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    float max_val = 0;
    for (size_t i = 0; i < length; i++) {
        max_val = max(max_val, abs(audio_data[i]));
    }
    
    if (max_val == 0) max_val = 1; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    
    // 2. –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    float mean = 0, variance = 0;
    for (size_t i = 0; i < length; i++) {
        float normalized = audio_data[i] / max_val;
        mean += normalized;
        features[i % FEATURE_SIZE] = normalized; // –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
    mean /= length;
    
    for (size_t i = 0; i < length; i++) {
        float normalized = audio_data[i] / max_val;
        variance += (normalized - mean) * (normalized - mean);
    }
    variance /= length;
    
    // 3. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    float energy = 0;
    for (size_t i = 0; i < length; i++) {
        float normalized = audio_data[i] / max_val;
        energy += normalized * normalized;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
    if (FEATURE_SIZE > 3) {
        features[FEATURE_SIZE - 3] = mean;
        features[FEATURE_SIZE - 2] = sqrt(variance);
        features[FEATURE_SIZE - 1] = energy / length;
    }
}

// –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ä–ª–æ–≤–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
void preprocess_throat_signal(int16_t* input, int16_t* output, size_t length) {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Å—Ç–æ—Ç
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IIR/FIR —Ñ–∏–ª—å—Ç—Ä—ã
    
    float alpha = 0.1; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    int16_t prev_sample = 0;
    
    for (size_t i = 0; i < length; i++) {
        // –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (—É–±–∏—Ä–∞–µ–º DC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É)
        int16_t hp_output = input[i] - prev_sample;
        prev_sample = input[i];
        
        // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–π –ù–ß —Ñ–∏–ª—å—Ç—Ä)
        static int16_t lp_prev = 0;
        lp_prev = alpha * hp_output + (1 - alpha) * lp_prev;
        
        output[i] = lp_prev;
    }
}

// ML Inference
bool run_ml_inference(float* input_features, float* output_features) {
    if (!interpreter || !input_tensor || !output_tensor) {
        Serial.println("‚ùå ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
        return false;
    }
    
    xSemaphoreTake(ml_mutex, portMAX_DELAY);
    
    // –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (input_tensor->type == kTfLiteInt8) {
        for (int i = 0; i < FEATURE_SIZE; i++) {
            input_tensor->data.int8[i] = 
                (input_features[i] / ml_config.input_scale) + ml_config.input_zero_point;
        }
    } else {
        // Float32 –º–æ–¥–µ–ª—å
        for (int i = 0; i < FEATURE_SIZE; i++) {
            input_tensor->data.f[i] = input_features[i];
        }
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ inference
    TfLiteStatus invoke_status = interpreter->Invoke();
    if (invoke_status != kTfLiteOk) {
        Serial.println("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ML inference");
        xSemaphoreGive(ml_mutex);
        return false;
    }
    
    // –î–µ–∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (output_tensor->type == kTfLiteInt8) {
        for (int i = 0; i < OUTPUT_SIZE; i++) {
            output_features[i] = 
                (output_tensor->data.int8[i] - ml_config.output_zero_point) * ml_config.output_scale;
        }
    } else {
        // Float32 –º–æ–¥–µ–ª—å
        for (int i = 0; i < OUTPUT_SIZE; i++) {
            output_features[i] = output_tensor->data.f[i];
        }
    }
    
    xSemaphoreGive(ml_mutex);
    return true;
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤
void features_to_vibration(float* features, uint8_t* vibro1_signal, uint8_t* vibro2_signal, size_t length) {
    for (size_t i = 0; i < length; i++) {
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –º–æ—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ—Ä–µ–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        float feature1 = features[i % OUTPUT_SIZE];
        float feature2 = features[(i + OUTPUT_SIZE/2) % OUTPUT_SIZE];
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-255 –¥–ª—è PWM
        vibro1_signal[i] = constrain(abs(feature1) * 255, 0, 255);
        vibro2_signal[i] = constrain(abs(feature2) * 255, 0, 255);
    }
}

// –ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
void audio_input_task(void* parameter) {
    Serial.println("üé§ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ");
    
    int16_t* temp_buffer = (int16_t*)malloc(BUFFER_SIZE * sizeof(int16_t));
    if (!temp_buffer) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞");
        vTaskDelete(NULL);
        return;
    }
    
    while (true) {
        size_t bytes_read = 0;
        esp_err_t result = i2s_read(I2S_NUM_0, temp_buffer, 
                                   BUFFER_SIZE * sizeof(int16_t), 
                                   &bytes_read, portMAX_DELAY);
        
        if (result == ESP_OK && bytes_read > 0) {
            size_t samples_read = bytes_read / sizeof(int16_t);
            
            // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ä–ª–æ–≤–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            preprocess_throat_signal(temp_buffer, temp_buffer, samples_read);
            
            // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä
            for (size_t i = 0; i < samples_read; i++) {
                input_buffer.data[input_buffer.write_index] = temp_buffer[i];
                input_buffer.write_index = (input_buffer.write_index + 1) % input_buffer.size;
                
                if (input_buffer.write_index == input_buffer.read_index) {
                    input_buffer.full = true;
                    input_buffer.read_index = (input_buffer.read_index + 1) % input_buffer.size;
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            AudioBuffer* buffer_ptr = &input_buffer;
            xQueueSend(audio_input_queue, &buffer_ptr, 0);
        }
        
        esp_task_wdt_reset(); // –°–±—Ä–æ—Å watchdog
        vTaskDelay(1); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    free(temp_buffer);
    vTaskDelete(NULL);
}

// –ó–∞–¥–∞—á–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
void feature_extraction_task(void* parameter) {
    Serial.println("üîç –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤");
    
    float* features = (float*)malloc(FEATURE_SIZE * sizeof(float));
    if (!features) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤");
        vTaskDelete(NULL);
        return;
    }
    
    AudioBuffer* received_buffer;
    
    while (true) {
        if (xQueueReceive(audio_input_queue, &received_buffer, portMAX_DELAY)) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
            size_t start_index = received_buffer->write_index > BUFFER_SIZE ? 
                                received_buffer->write_index - BUFFER_SIZE : 0;
            
            extract_features(received_buffer->data + start_index, 
                           min(BUFFER_SIZE, received_buffer->write_index), 
                           features);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ML
            xQueueSend(feature_queue, &features, 0);
        }
        
        esp_task_wdt_reset();
        vTaskDelay(1);
    }
    
    free(features);
    vTaskDelete(NULL);
}

// –ó–∞–¥–∞—á–∞ ML inference
void ml_inference_task(void* parameter) {
    Serial.println("üß† –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ ML inference");
    
    float* input_features;
    float* output_features = (float*)malloc(OUTPUT_SIZE * sizeof(float));
    
    if (!output_features) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤");
        vTaskDelete(NULL);
        return;
    }
    
    while (true) {
        if (xQueueReceive(feature_queue, &input_features, portMAX_DELAY)) {
            if (run_ml_inference(input_features, output_features)) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                xQueueSend(output_queue, &output_features, 0);
            } else {
                Serial.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ ML inference, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–µ–π–º");
                
                // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                if (!interpreter) {
                    Serial.println("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...");
                    if (load_tflite_model()) {
                        Serial.println("‚úÖ –ú–æ–¥–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                    }
                }
            }
        }
        
        esp_task_wdt_reset();
        vTaskDelay(1);
    }
    
    free(output_features);
    vTaskDelete(NULL);
}

// –ó–∞–¥–∞—á–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä—ã
void audio_output_task(void* parameter) {
    Serial.println("üì≥ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è");
    
    uint8_t* vibro1_signal = (uint8_t*)malloc(OUTPUT_SIZE);
    uint8_t* vibro2_signal = (uint8_t*)malloc(OUTPUT_SIZE);
    
    if (!vibro1_signal || !vibro2_signal) {
        Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤");
        vTaskDelete(NULL);
        return;
    }
    
    float* received_features;
    
    while (true) {
        if (xQueueReceive(output_queue, &received_features, portMAX_DELAY)) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤
            features_to_vibration(received_features, vibro1_signal, vibro2_signal, OUTPUT_SIZE);
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä—ã
            for (size_t i = 0; i < OUTPUT_SIZE; i++) {
                ledcWrite(0, vibro1_signal[i]);
                ledcWrite(1, vibro2_signal[i]);
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
                delayMicroseconds(100); // 10kHz —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        }
        
        esp_task_wdt_reset();
        vTaskDelay(1);
    }
    
    free(vibro1_signal);
    free(vibro2_signal);
    vTaskDelete(NULL);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
void handle_system_error(const char* error_msg) {
    Serial.printf("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: %s\n", error_msg);
    
    current_state = STATE_ERROR;
    digitalWrite(LED_STATUS_PIN, HIGH); // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä—ã
    ledcWrite(0, 0);
    ledcWrite(1, 0);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    delay(5000);
    Serial.println("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...");
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (!interpreter) {
        load_tflite_model();
    }
    
    current_state = STATE_READY;
    digitalWrite(LED_STATUS_PIN, LOW);
    Serial.println("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    Serial.println("üöÄ –ó–∞–ø—É—Å–∫ VoiceX - –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞");
    Serial.println("===============================================");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
    pinMode(LED_STATUS_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    
    // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
    digitalWrite(LED_STATUS_PIN, HIGH);
    
    current_state = STATE_INIT;
    
    // –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bool init_success = true;
    
    // 1. SPIFFS
    if (!init_spiffs()) {
        handle_system_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIFFS");
        init_success = false;
    }
    
    // 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML
    if (init_success && !load_ml_config()) {
        handle_system_error("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML");
        init_success = false;
    }
    
    // 3. TensorFlow Lite –º–æ–¥–µ–ª—å
    if (init_success && !load_tflite_model()) {
        handle_system_error("–ó–∞–≥—Ä—É–∑–∫–∞ TensorFlow Lite –º–æ–¥–µ–ª–∏");
        init_success = false;
    }
    
    // 4. I2S –∞—É–¥–∏–æ
    if (init_success && !init_i2s()) {
        handle_system_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2S");
        init_success = false;
    }
    
    // 5. –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä—ã
    if (init_success && !init_audio_buffers()) {
        handle_system_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–æ–≤");
        init_success = false;
    }
    
    // 6. –í–∏–±—Ä–æ–º–æ—Ç–æ—Ä—ã
    if (init_success && !init_vibro_motors()) {
        handle_system_error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤");
        init_success = false;
    }
    
    // 7. –û—á–µ—Ä–µ–¥–∏ –∏ –º—å—é—Ç–µ–∫—Å—ã
    if (init_success && !init_queues_and_mutexes()) {
        handle_system_error("–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –∏ –º—å—é—Ç–µ–∫—Å–æ–≤");
        init_success = false;
    }
    
    if (init_success) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        Serial.println("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...");
        
        xTaskCreatePinnedToCore(
            audio_input_task,
            "AudioInput",
            4096,
            NULL,
            2, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞—É–¥–∏–æ
            &audio_input_task_handle,
            0  // –Ø–¥—Ä–æ 0
        );
        
        xTaskCreatePinnedToCore(
            feature_extraction_task,
            "FeatureExtraction", 
            4096,
            NULL,
            1,
            &feature_extraction_task_handle,
            0  // –Ø–¥—Ä–æ 0
        );
        
        xTaskCreatePinnedToCore(
            ml_inference_task,
            "MLInference",
            8192, // –ë–æ–ª—å—à–µ —Å—Ç–µ–∫–∞ –¥–ª—è ML
            NULL,
            1,
            &ml_inference_task_handle,
            1  // –Ø–¥—Ä–æ 1 –¥–ª—è ML
        );
        
        xTaskCreatePinnedToCore(
            audio_output_task,
            "AudioOutput",
            4096,
            NULL,
            2, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            &audio_output_task_handle,
            1  // –Ø–¥—Ä–æ 1
        );
        
        current_state = STATE_READY;
        digitalWrite(LED_STATUS_PIN, LOW);
        
        Serial.println("‚úÖ VoiceX —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
        Serial.println("üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏");
    } else {
        current_state = STATE_ERROR;
        Serial.println("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –°–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—à–∏–±–∫–∏.");
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Watchdog
    esp_task_wdt_init(30, true); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    esp_task_wdt_add(NULL); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
}

void loop() {
    static unsigned long last_status_update = 0;
    static unsigned long last_button_check = 0;
    static bool button_pressed = false;
    static unsigned long button_press_time = 0;
    
    unsigned long current_time = millis();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–∂–¥—ã–µ 50–º—Å
    if (current_time - last_button_check > 50) {
        bool current_button_state = digitalRead(BUTTON_PIN) == LOW;
        
        if (current_button_state && !button_pressed) {
            // –ù–∞—á–∞–ª–æ –Ω–∞–∂–∞—Ç–∏—è
            button_pressed = true;
            button_press_time = current_time;
            
            if (current_state == STATE_READY) {
                current_state = STATE_RECORDING;
                Serial.println("üé§ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏...");
                digitalWrite(LED_STATUS_PIN, HIGH);
            }
        } else if (!current_button_state && button_pressed) {
            // –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            button_pressed = false;
            unsigned long press_duration = current_time - button_press_time;
            
            if (current_state == STATE_RECORDING) {
                if (press_duration > 100) { // –ú–∏–Ω–∏–º—É–º 100–º—Å
                    current_state = STATE_PROCESSING;
                    Serial.printf("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ (%lu –º—Å)...\n", press_duration);
                } else {
                    current_state = STATE_READY;
                    Serial.println("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
                }
                digitalWrite(LED_STATUS_PIN, LOW);
            }
            
            // –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ (>3 —Å–µ–∫) –¥–ª—è –æ—Å–æ–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            if (press_duration > 3000) {
                Serial.println("üîß –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã");
                ESP.restart();
            }
        }
        
        last_button_check = current_time;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    if (current_time - last_status_update > 5000) {
        print_system_status();
        last_status_update = current_time;
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    switch (current_state) {
        case STATE_INIT:
            // –ë—ã—Å—Ç—Ä–æ–µ –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            digitalWrite(LED_STATUS_PIN, (millis() / 200) % 2);
            break;
            
        case STATE_READY:
            // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            digitalWrite(LED_STATUS_PIN, (millis() / 1000) % 2);
            break;
            
        case STATE_RECORDING:
            // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
            digitalWrite(LED_STATUS_PIN, HIGH);
            break;
            
        case STATE_PROCESSING:
            // –ë—ã—Å—Ç—Ä–æ–µ –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            digitalWrite(LED_STATUS_PIN, (millis() / 100) % 2);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ READY –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (current_time - button_press_time > 2000) {
                current_state = STATE_READY;
            }
            break;
            
        case STATE_PLAYING:
            // –î–≤–æ–π–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            int pattern = (millis() / 150) % 4;
            digitalWrite(LED_STATUS_PIN, pattern < 2 ? HIGH : LOW);
            break;
            
        case STATE_ERROR:
            // SOS —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            int sos_pattern = (millis() / 200) % 8;
            bool sos_state = (sos_pattern < 3) || (sos_pattern == 4) || (sos_pattern == 5);
            digitalWrite(LED_STATUS_PIN, sos_state ? HIGH : LOW);
            break;
    }
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    static unsigned long last_memory_check = 0;
    if (current_time - last_memory_check > 10000) { // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫
        size_t free_heap = esp_get_free_heap_size();
        size_t min_free_heap = esp_get_minimum_free_heap_size();
        
        if (free_heap < 10000) { // –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ –ø–∞–º—è—Ç–∏
            Serial.printf("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ –ø–∞–º—è—Ç–∏: %d –±–∞–π—Ç\n", free_heap);
            handle_system_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–º—è—Ç–∏");
        }
        
        last_memory_check = current_time;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
    static unsigned long last_task_check = 0;
    if (current_time - last_task_check > 15000) { // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫
        check_task_health();
        last_task_check = current_time;
    }
    
    // –°–±—Ä–æ—Å watchdog
    esp_task_wdt_reset();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
    delay(10);
}

void print_system_status() {
    size_t free_heap = esp_get_free_heap_size();
    size_t min_free_heap = esp_get_minimum_free_heap_size();
    
    Serial.println("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã VoiceX:");
    Serial.printf("   –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n", get_state_name(current_state));
    Serial.printf("   –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: %d –±–∞–π—Ç (–º–∏–Ω: %d)\n", free_heap, min_free_heap);
    Serial.printf("   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %lu —Å–µ–∫\n", millis() / 1000);
    
    // –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
    if (audio_input_queue) {
        Serial.printf("   –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –≤—Ö–æ–¥–∞: %d/%d\n", 
                     uxQueueMessagesWaiting(audio_input_queue), 10);
    }
    if (feature_queue) {
        Serial.printf("   –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: %d/%d\n", 
                     uxQueueMessagesWaiting(feature_queue), 5);
    }
    if (output_queue) {
        Serial.printf("   –û—á–µ—Ä–µ–¥—å –≤—ã–≤–æ–¥–∞: %d/%d\n", 
                     uxQueueMessagesWaiting(output_queue), 5);
    }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ ML –º–æ–¥–µ–ª–∏
    Serial.printf("   ML –º–æ–¥–µ–ª—å: %s\n", interpreter ? "–ó–∞–≥—Ä—É–∂–µ–Ω–∞" : "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    Serial.printf("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", ml_config.user_id.c_str());
    
    Serial.println("---");
}

const char* get_state_name(SystemState state) {
    switch (state) {
        case STATE_INIT: return "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è";
        case STATE_READY: return "–ì–æ—Ç–æ–≤";
        case STATE_RECORDING: return "–ó–∞–ø–∏—Å—å";
        case STATE_PROCESSING: return "–û–±—Ä–∞–±–æ—Ç–∫–∞";
        case STATE_PLAYING: return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ";
        case STATE_ERROR: return "–û—à–∏–±–∫–∞";
        default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
}

void check_task_health() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
    TaskHandle_t tasks[] = {
        audio_input_task_handle,
        feature_extraction_task_handle,
        ml_inference_task_handle,
        audio_output_task_handle
    };
    
    const char* task_names[] = {
        "AudioInput",
        "FeatureExtraction", 
        "MLInference",
        "AudioOutput"
    };
    
    bool all_tasks_healthy = true;
    
    for (int i = 0; i < 4; i++) {
        if (tasks[i] != NULL) {
            eTaskState task_state = eTaskGetState(tasks[i]);
            if (task_state == eDeleted || task_state == eInvalid) {
                Serial.printf("‚ùå –ó–∞–¥–∞—á–∞ %s –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: %d)\n", task_names[i], task_state);
                all_tasks_healthy = false;
                
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
                restart_task(i);
            }
        } else {
            Serial.printf("‚ùå –ó–∞–¥–∞—á–∞ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", task_names[i]);
            all_tasks_healthy = false;
        }
    }
    
    if (!all_tasks_healthy) {
        Serial.println("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞—á–∞–º–∏");
    }
}

void restart_task(int task_index) {
    Serial.printf("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ %d...\n", task_index);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    TaskHandle_t* task_handles[] = {
        &audio_input_task_handle,
        &feature_extraction_task_handle,
        &ml_inference_task_handle,
        &audio_output_task_handle
    };
    
    if (*task_handles[task_index] != NULL) {
        vTaskDelete(*task_handles[task_index]);
        *task_handles[task_index] = NULL;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ
    switch (task_index) {
        case 0:
            xTaskCreatePinnedToCore(audio_input_task, "AudioInput", 4096, NULL, 2, 
                                   &audio_input_task_handle, 0);
            break;
        case 1:
            xTaskCreatePinnedToCore(feature_extraction_task, "FeatureExtraction", 4096, NULL, 1,
                                   &feature_extraction_task_handle, 0);
            break;
        case 2:
            xTaskCreatePinnedToCore(ml_inference_task, "MLInference", 8192, NULL, 1,
                                   &ml_inference_task_handle, 1);
            break;
        case 3:
            xTaskCreatePinnedToCore(audio_output_task, "AudioOutput", 4096, NULL, 2,
                                   &audio_output_task_handle, 1);
            break;
    }
    
    Serial.printf("‚úÖ –ó–∞–¥–∞—á–∞ %d –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞\n", task_index);
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

void dump_system_info() {
    Serial.println("üîç –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:");
    Serial.println("================================");
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∏–ø–µ
    esp_chip_info_t chip_info;
    esp_chip_info(&chip_info);
    Serial.printf("–ß–∏–ø: %s rev %d\n", CONFIG_IDF_TARGET, chip_info.revision);
    Serial.printf("–Ø–¥—Ä–∞: %d\n", chip_info.cores);
    Serial.printf("WiFi: %s, Bluetooth: %s\n", 
                  (chip_info.features & CHIP_FEATURE_WIFI_BGN) ? "–î–∞" : "–ù–µ—Ç",
                  (chip_info.features & CHIP_FEATURE_BT) ? "–î–∞" : "–ù–µ—Ç");
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    Serial.printf("–û–±—â–∞—è –ø–∞–º—è—Ç—å: %d –±–∞–π—Ç\n", ESP.getHeapSize());
    Serial.printf("–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: %d –±–∞–π—Ç\n", ESP.getFreeHeap());
    Serial.printf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è: %d –±–∞–π—Ç\n", ESP.getMinFreeHeap());
    Serial.printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–∫: %d –±–∞–π—Ç\n", ESP.getMaxAllocHeap());
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Flash
    Serial.printf("Flash —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", ESP.getFlashChipSize());
    Serial.printf("Flash —Å–∫–æ—Ä–æ—Å—Ç—å: %d Hz\n", ESP.getFlashChipSpeed());
    
    // SPIFFS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    Serial.printf("SPIFFS –æ–±—â–∏–π: %d –±–∞–π—Ç\n", SPIFFS.totalBytes());
    Serial.printf("SPIFFS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %d –±–∞–π—Ç\n", SPIFFS.usedBytes());
    
    Serial.println("================================");
}

void save_debug_log() {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –æ—Ç–ª–∞–¥–∫–∏ –≤ SPIFFS –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    xSemaphoreTake(spiffs_mutex, portMAX_DELAY);
    
    File debug_file = SPIFFS.open("/debug.log", "a");
    if (debug_file) {
        debug_file.printf("–í—Ä–µ–º—è: %lu, –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü–∞–º—è—Ç—å: %d\n",
                         millis(), get_state_name(current_state), ESP.getFreeHeap());
        debug_file.close();
    }
    
    xSemaphoreGive(spiffs_mutex);
}