#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è VoiceX
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
"""

import os
import sys
import subprocess
import argparse
import json
from pathlib import Path
import time

class VoiceXPipelineRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ VoiceX"""
    
    def __init__(self, config):
        self.config = config
        self.base_dir = Path(config['base_directory'])
        self.data_dir = self.base_dir / 'data'
        self.models_dir = self.base_dir / 'models'
        self.results_dir = self.base_dir / 'results'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in [self.data_dir, self.models_dir, self.results_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def run_command(self, command, description):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"\nüîÑ {description}")
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
        print("-" * 50)
        
        start_time = time.time()
        
        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                cwd=self.base_dir
            )
            
            duration = time.time() - start_time
            
            if result.returncode == 0:
                print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ ({duration:.1f}—Å)")
                if result.stdout:
                    print("üì§ –í—ã–≤–æ–¥:")
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π ({duration:.1f}—Å)")
                print("üì§ Stdout:", result.stdout)
                print("üì§ Stderr:", result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def step_1_data_preparation(self):
        """–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "="*60)
        print("üì• –®–ê–ì 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• VIBRAVOX")
        print("="*60)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        command = [
            sys.executable, 'data_preparation.py',
            '--output_dir', str(self.data_dir),
            '--all',
            '--target_sr', str(self.config['sample_rate']),
            '--target_duration', str(self.config['duration'])
        ]
        
        success = self.run_command(command, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Vibravox")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            stats_file = self.data_dir / 'dataset_stats.json'
            if stats_file.exists():
                with open(stats_file, 'r') as f:
                    stats = json.load(f)
                
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
                print(f"   –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']:.1f} —Å–µ–∫")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {stats['speakers']}")
        
        return success
    
    def step_2_model_training(self):
        """–®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print("\n" + "="*60)
        print("üß† –®–ê–ì 2: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("="*60)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        command = [
            sys.executable, 'train_voicex_model.py',
            '--data_path', str(self.data_dir / 'processed'),
            '--model_size', self.config['model_size'],
            '--epochs', str(self.config['epochs']),
            '--output_dir', str(self.models_dir)
        ]
        
        success = self.run_command(command, "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ VoiceX")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            keras_model = self.models_dir / 'voicex_model.h5'
            tflite_model = self.models_dir / 'voicex_model.tflite'
            
            if keras_model.exists() and tflite_model.exists():
                print(f"\n‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:")
                print(f"   Keras: {keras_model} ({keras_model.stat().st_size / 1024:.1f} KB)")
                print(f"   TFLite: {tflite_model} ({tflite_model.stat().st_size / 1024:.1f} KB)")
        
        return success
    
    def step_3_model_testing(self):
        """–®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print("\n" + "="*60)
        print("üß™ –®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("="*60)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        command = [
            sys.executable, 'model_testing.py',
            '--model_path', str(self.models_dir / 'voicex_model.h5'),
            '--config_path', str(self.models_dir / 'config.json'),
            '--scaler_path', str(self.models_dir / 'scaler.pkl'),
            '--test_data', str(self.data_dir / 'processed'),
            '--output_dir', str(self.results_dir),
            '--num_samples', str(self.config['test_samples'])
        ]
        
        success = self.run_command(command, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            metrics_file = self.results_dir / 'test_metrics.json'
            if metrics_file.exists():
                with open(metrics_file, 'r') as f:
                    metrics = json.load(f)
                
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π: {metrics['successful_conversions']}/{metrics['total_samples']}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {metrics['success_rate']*100:.1f}%")
                
                if 'mse' in metrics:
                    print(f"   MSE: {metrics['mse']:.6f}")
                    print(f"   MAE: {metrics['mae']:.6f}")
                    print(f"   –ö–æ—Å–∏–Ω—É—Å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {metrics['cosine_similarity']:.3f}")
        
        return success
    
    def step_4_create_demo(self):
        """–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ"""
        print("\n" + "="*60)
        print("üé¨ –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û")
        print("="*60)
        
        # –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ
        processed_dir = self.data_dir / 'processed'
        throat_files = list((processed_dir / 'throat_microphone').rglob('*.wav'))
        
        if not throat_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ")
            return False
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        throat_file = throat_files[0]
        relative_path = throat_file.relative_to(processed_dir / 'throat_microphone')
        speech_file = processed_dir / 'speech' / relative_path
        
        if not speech_file.exists():
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –æ–±—ã—á–Ω–æ–π —Ä–µ—á–∏ –¥–ª—è –¥–µ–º–æ")
            return False
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ
        command = [
            sys.executable, 'model_testing.py',
            '--model_path', str(self.models_dir / 'voicex_model.h5'),
            '--config_path', str(self.models_dir / 'config.json'),
            '--scaler_path', str(self.models_dir / 'scaler.pkl'),
            '--throat_file', str(throat_file),
            '--speech_file', str(speech_file),
            '--output_dir', str(self.results_dir),
            '--create_demo'
        ]
        
        success = self.run_command(command, "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        if success:
            demo_file = self.results_dir / 'demo' / 'demo.html'
            if demo_file.exists():
                print(f"\nüéâ –î–µ–º–æ —Å–æ–∑–¥–∞–Ω–æ!")
                print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {demo_file}")
        
        return success
    
    def step_5_esp32_preparation(self):
        """–®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è ESP32"""
        print("\n" + "="*60)
        print("üîß –®–ê–ì 5: –ü–û–î–ì–û–¢–û–í–ö–ê –î–õ–Ø ESP32")
        print("="*60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è ESP32
        esp32_dir = self.base_dir / 'esp32_deployment'
        esp32_dir.mkdir(exist_ok=True)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ TFLite –º–æ–¥–µ–ª–∏
        tflite_model = self.models_dir / 'voicex_model.tflite'
        if tflite_model.exists():
            import shutil
            shutil.copy2(tflite_model, esp32_dir / 'voice_conversion_model.tflite')
            print(f"‚úÖ TFLite –º–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ESP32")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è ESP32
        esp32_config = {
            'model_file': 'voice_conversion_model.tflite',
            'sample_rate': self.config['sample_rate'],
            'duration': self.config['duration'],
            'input_dim': self.config.get('input_dim', 1024),
            'output_dim': self.config.get('output_dim', 1024),
            'model_size_kb': tflite_model.stat().st_size / 1024 if tflite_model.exists() else 0
        }
        
        with open(esp32_dir / 'esp32_config.json', 'w') as f:
            json.dump(esp32_config, f, indent=2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è ESP32
        readme_content = """# VoiceX ESP32 Deployment

## –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ESP32:

1. `voice_conversion_model.tflite` - –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å TensorFlow Lite
2. `esp32_config.json` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏

## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `voice_conversion_model.tflite` –≤ SPIFFS ESP32
2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∫–æ–¥–µ ESP32 —Å–æ–≥–ª–∞—Å–Ω–æ `esp32_config.json`
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É VoiceX –Ω–∞ ESP32

## –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏:

- –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {:.1f} KB
- –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {} –ì—Ü
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {} —Å–µ–∫
- –í—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}
- –í—ã—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {}

""".format(
            esp32_config['model_size_kb'],
            esp32_config['sample_rate'],
            esp32_config['duration'],
            esp32_config['input_dim'],
            esp32_config['output_dim']
        )
        
        with open(esp32_dir / 'README.md', 'w') as f:
            f.write(readme_content)
        
        print(f"üìÅ –§–∞–π–ª—ã –¥–ª—è ESP32 –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤: {esp32_dir}")
        
        return True
    
    def run_full_pipeline(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê VOICEX")
        print("üéØ –¶–µ–ª—å: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –¥–ª—è ESP32")
        print("üìä –î–∞—Ç–∞—Å–µ—Ç: Vibravox")
        print("=" * 80)
        
        start_time = time.time()
        
        # –≠—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
        steps = [
            ("1Ô∏è‚É£", self.step_1_data_preparation),
            ("2Ô∏è‚É£", self.step_2_model_training),
            ("3Ô∏è‚É£", self.step_3_model_testing),
            ("4Ô∏è‚É£", self.step_4_create_demo),
            ("5Ô∏è‚É£", self.step_5_esp32_preparation)
        ]
        
        successful_steps = 0
        
        for step_icon, step_func in steps:
            print(f"\n{step_icon} –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {step_func.__name__}")
            
            if step_func():
                successful_steps += 1
                print(f"‚úÖ {step_func.__name__} - –£–°–ü–ï–®–ù–û")
            else:
                print(f"‚ùå {step_func.__name__} - –û–®–ò–ë–ö–ê")
                
                # –°–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏
                user_input = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É? (y/N): ")
                if user_input.lower() != 'y':
                    print("‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
        
        total_time = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*80)
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {successful_steps}/{len(steps)}")
        
        if successful_steps == len(steps):
            print("\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –í–´–ü–û–õ–ù–ï–ù –ü–û–õ–ù–û–°–¢–¨–Æ!")
            print("üöÄ –ú–æ–¥–µ–ª—å VoiceX –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ ESP32!")
            
            # –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   –ú–æ–¥–µ–ª–∏: {self.models_dir}")
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.results_dir}")
            print(f"   ESP32 —Ñ–∞–π–ª—ã: {self.base_dir}/esp32_deployment")
            
            # –î–µ–º–æ
            demo_file = self.results_dir / 'demo' / 'demo.html'
            if demo_file.exists():
                print(f"   –î–µ–º–æ: {demo_file}")
        else:
            print(f"\n‚ö†Ô∏è  –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ ({successful_steps}/{len(steps)} —ç—Ç–∞–ø–æ–≤)")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        
        return successful_steps == len(steps)

def load_config(config_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    if config_path and Path(config_path).exists():
        with open(config_path, 'r') as f:
            return json.load(f)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        'base_directory': './voicex_pipeline',
        'sample_rate': 22050,
        'duration': 3.0,
        'model_size': 'small',
        'epochs': 50,
        'test_samples': 20
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è VoiceX')
    parser.add_argument('--config', type=str, 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON')
    parser.add_argument('--base_dir', type=str, default='./voicex_pipeline',
                       help='–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--skip_data', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--skip_training', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--skip_testing', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--only_demo', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ–º–æ (—Ç—Ä–µ–±—É–µ—Ç –≥–æ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏)')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config)
    config['base_directory'] = args.base_dir
    
    # –°–æ–∑–¥–∞–Ω–∏–µ runner'–∞
    runner = VoiceXPipelineRunner(config)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = Path(config['base_directory']) / 'pipeline_config.json'
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
    
    try:
        if args.only_demo:
            # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ
            success = runner.step_4_create_demo()
            return 0 if success else 1
        else:
            # –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
            success = runner.run_full_pipeline()
            return 0 if success else 1
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())