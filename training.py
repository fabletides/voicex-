#!/usr/bin/env python3
"""
VoiceX Complete Training Pipeline
–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import json
import shutil
import argparse
from pathlib import Path
import subprocess
import sys

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from ml_pipeline import VoiceXTrainer
    from model_testing import VoiceXModelTester
    from esp32_utils import ESP32ModelUploader, create_deployment_package
    from model_converter import convert_tflite_to_header, create_demo_model
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class VoiceXPipeline:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º VoiceX"""
    
    def __init__(self, config_path="config.json"):
        self.config_path = config_path
        self.config = self.load_config()
        self.output_dir = Path("pipeline_output")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.create_directory_structure()
        
        print("üöÄ VoiceX Complete Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        default_config = {
            "pipeline": {
                "create_demo_data": True,
                "train_model": True,
                "test_model": True,
                "convert_to_tflite": True,
                "create_header": True,
                "create_spiffs_data": True,
                "create_deployment_package": True
            },
            "model": {
                "input_dim": 512,
                "output_dim": 256,
                "epochs": 50,
                "batch_size": 32,
                "quantize": True
            },
            "esp32": {
                "create_platformio_project": True,
                "copy_firmware": True,
                "generate_build_scripts": True
            },
            "demo": {
                "num_samples": 100,
                "sample_rate": 22050,
                "duration": 3.0
            }
        }
        
        if os.path.exists(self.config_path):
            with open(self.config_path, 'r') as f:
                user_config = json.load(f)
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for key in default_config:
                if key in user_config:
                    default_config[key].update(user_config[key])
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(self.config_path, 'w') as f:
                json.dump(default_config, f, indent=2)
            print(f"üìã –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {self.config_path}")
        
        return default_config
    
    def create_directory_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        dirs = [
            "pipeline_output",
            "pipeline_output/models",
            "pipeline_output/datasets", 
            "pipeline_output/esp32_firmware",
            "pipeline_output/spiffs_data",
            "pipeline_output/deployment",
            "pipeline_output/tests",
            "pipeline_output/logs"
        ]
        
        for dir_path in dirs:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    def step1_create_demo_data(self):
        """–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.config['pipeline']['create_demo_data']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö")
            return True
        
        print("üìä –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            import numpy as np
            import soundfile as sf
            import librosa
            
            datasets_dir = self.output_dir / "datasets"
            throat_dir = datasets_dir / "throat_microphone"
            speech_dir = datasets_dir / "speech"
            
            throat_dir.mkdir(exist_ok=True)
            speech_dir.mkdir(exist_ok=True)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            sr = self.config['demo']['sample_rate']
            duration = self.config['demo']['duration']
            num_samples = self.config['demo']['num_samples']
            
            print(f"   –°–æ–∑–¥–∞–Ω–∏–µ {num_samples} –¥–µ–º–æ –æ–±—Ä–∞–∑—Ü–æ–≤...")
            
            for i in range(num_samples):
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                t = np.linspace(0, duration, int(sr * duration))
                
                # –°–∏–≥–Ω–∞–ª –≥–æ—Ä–ª–æ–≤–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–∑–∞—à—É–º–ª–µ–Ω–Ω—ã–π, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π)
                throat_signal = 0.3 * np.sin(2 * np.pi * 150 * t) + \
                               0.2 * np.sin(2 * np.pi * 300 * t) + \
                               0.1 * np.random.normal(0, 0.1, len(t))
                
                # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ—á—å (–±–æ–ª–µ–µ —á–∏—Å—Ç–∞—è, —Å –≥–∞—Ä–º–æ–Ω–∏–∫–∞–º–∏)
                speech_signal = 0.5 * np.sin(2 * np.pi * 150 * t) + \
                               0.3 * np.sin(2 * np.pi * 300 * t) + \
                               0.2 * np.sin(2 * np.pi * 450 * t) + \
                               0.1 * np.sin(2 * np.pi * 600 * t) + \
                               0.05 * np.random.normal(0, 0.05, len(t))
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
                window = np.hanning(len(t))
                throat_signal *= window
                speech_signal *= window
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                throat_file = throat_dir / f"sample_{i:03d}.wav"
                speech_file = speech_dir / f"sample_{i:03d}.wav"
                
                sf.write(throat_file, throat_signal, sr)
                sf.write(speech_file, speech_signal, sr)
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {num_samples} –ø–∞—Ä –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤")
            print(f"   üìÅ –ì–æ—Ä–ª–æ–≤–æ–π –º–∏–∫—Ä–æ—Ñ–æ–Ω: {throat_dir}")
            print(f"   üìÅ –û–±—ã—á–Ω–∞—è —Ä–µ—á—å: {speech_dir}")
            
            return True
            
        except ImportError as e:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ: {e}")
            print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install numpy soundfile librosa")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def step2_train_model(self):
        """–®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
        if not self.config['pipeline']['train_model']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return True
        
        print("üß† –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer = VoiceXTrainer()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_path = self.output_dir / "datasets"
            if not data_path.exists():
                print("   ‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            print("   üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            X_data, y_data = trainer.load_dataset(str(data_path))
            
            if X_data is None or len(X_data) == 0:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
            
            print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(X_data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            from sklearn.model_selection import train_test_split
            X_train, X_test, y_train, y_test = train_test_split(
                X_data, y_data, test_size=0.2, random_state=42
            )
            
            # –û–±—É—á–µ–Ω–∏–µ
            print("   üéØ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è...")
            history = trainer.train_model(X_train, y_train)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            models_dir = self.output_dir / "models"
            trainer.save_training_artifacts(str(models_dir))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TFLite
            if self.config['pipeline']['convert_to_tflite']:
                print("   üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TensorFlow Lite...")
                tflite_path = models_dir / "voicex_model.tflite"
                
                quantize = self.config['model']['quantize']
                trainer.convert_to_tflite(
                    str(tflite_path), 
                    quantize=quantize,
                    X_data=X_train if quantize else None
                )
            
            print("   ‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def step3_test_model(self):
        """–®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.config['pipeline']['test_model']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            return True
        
        print("üß™ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        try:
            models_dir = self.output_dir / "models"
            model_path = models_dir / "voicex_model.h5"
            config_path = models_dir / "config.json"
            scaler_path = models_dir / "scaler.pkl"
            
            if not all(p.exists() for p in [model_path, config_path, scaler_path]):
                print("   ‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
            tester = VoiceXModelTester(
                str(model_path),
                str(config_path), 
                str(scaler_path)
            )
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
            test_dir = self.output_dir / "tests"
            datasets_dir = self.output_dir / "datasets"
            
            results = tester.test_dataset(
                str(datasets_dir),
                str(test_dir),
                num_samples=10
            )
            
            if results:
                print("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_dir}")
                return True
            else:
                print("   ‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def step4_create_header_file(self):
        """–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.config['pipeline']['create_header']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return True
        
        print("üîß –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        
        try:
            models_dir = self.output_dir / "models"
            tflite_path = models_dir / "voicex_model.tflite"
            
            if not tflite_path.exists():
                print("   ‚ö†Ô∏è TFLite –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –º–æ–¥–µ–ª—å...")
                demo_model = create_demo_model()
                if demo_model:
                    shutil.move(demo_model, tflite_path)
                else:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –º–æ–¥–µ–ª—å")
                    return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
            header_path = models_dir / "voicex_model_data.h"
            convert_tflite_to_header(
                str(tflite_path),
                str(header_path),
                "voicex_model"
            )
            
            print(f"   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {header_path}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def step5_create_spiffs_data(self):
        """–®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SPIFFS"""
        if not self.config['pipeline']['create_spiffs_data']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ SPIFFS –¥–∞–Ω–Ω—ã—Ö")
            return True
        
        print("üì¶ –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SPIFFS...")
        
        try:
            models_dir = self.output_dir / "models"
            spiffs_dir = self.output_dir / "spiffs_data"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
            uploader = ESP32ModelUploader()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            uploader.prepare_spiffs_data(str(models_dir), str(spiffs_dir))
            
            print(f"   ‚úÖ SPIFFS –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ {spiffs_dir}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ SPIFFS –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def step6_create_esp32_project(self):
        """–®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ESP32"""
        if not self.config['esp32']['create_platformio_project']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è ESP32 –ø—Ä–æ–µ–∫—Ç–∞")
            return True
        
        print("üî© –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ ESP32 –ø—Ä–æ–µ–∫—Ç–∞...")
        
        try:
            esp32_dir = self.output_dir / "esp32_firmware"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ PlatformIO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            platformio_ini = """[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino

lib_deps = 
    bblanchon/ArduinoJson@^6.21.3
    https://github.com/tensorflow/tflite-micro-arduino-examples

build_flags = 
    -DCORE_DEBUG_LEVEL=3
    -DVOICEX_DEBUG=1
    -std=gnu++17

board_build.partitions = huge_app.csv
board_build.filesystem = spiffs

monitor_speed = 115200
upload_speed = 921600
"""
            
            with open(esp32_dir / "platformio.ini", 'w') as f:
                f.write(platformio_ini)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            (esp32_dir / "src").mkdir(exist_ok=True)
            (esp32_dir / "data").mkdir(exist_ok=True)
            (esp32_dir / "lib").mkdir(exist_ok=True)
            (esp32_dir / "include").mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ SPIFFS –¥–∞–Ω–Ω—ã—Ö
            spiffs_src = self.output_dir / "spiffs_data"
            spiffs_dst = esp32_dir / "data"
            
            if spiffs_src.exists():
                for file in spiffs_src.glob("*"):
                    if file.is_file():
                        shutil.copy2(file, spiffs_dst)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
            models_dir = self.output_dir / "models"
            header_file = models_dir / "voicex_model_data.h"
            if header_file.exists():
                shutil.copy2(header_file, esp32_dir / "include")
            
            print(f"   ‚úÖ ESP32 –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ {esp32_dir}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ESP32 –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
    
    def step7_create_deployment_package(self):
        """–®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.config['pipeline']['create_deployment_package']:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            return True
        
        print("üì¶ –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        try:
            models_dir = self.output_dir / "models"
            deployment_dir = self.output_dir / "deployment"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ ZIP –ø–∞–∫–µ—Ç–∞
            package_path = create_deployment_package(
                str(models_dir),
                str(deployment_dir / "voicex_deployment.zip")
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ README –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            readme_content = """# VoiceX Deployment Package

## –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

### 1. –ü—Ä–æ—à–∏–≤–∫–∞ ESP32
```bash
cd esp32_firmware
pio run --target upload
pio run --target uploadfs
```

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
- –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Serial Monitor (115200 baud)
- –î–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å: "üéâ VoiceX —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

### 3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ù–∞–π–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å ESP32 –≤ Serial Monitor
- –û—Ç–∫—Ä–æ–π—Ç–µ http://ESP32_IP –≤ –±—Ä–∞—É–∑–µ—Ä–µ

## –§–∞–π–ª—ã –≤ –ø–∞–∫–µ—Ç–µ
- voicex_model.tflite - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
- config.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- scaler.pkl - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- voicex_model_data.h - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è C++

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
- Email: support@voicex.kz
- Telegram: @voicex_support
"""
            
            with open(deployment_dir / "README.md", 'w') as f:
                f.write(readme_content)
            
            print(f"   ‚úÖ –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω –≤ {deployment_dir}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return False
    
    def step8_generate_build_scripts(self):
        """–®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏"""
        print("üìú –®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...")
        
        try:
            scripts_dir = self.output_dir / "scripts"
            scripts_dir.mkdir(exist_ok=True)
            
            # –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
            build_script = """#!/bin/bash
# VoiceX Build and Deploy Script

set -e

echo "üî® –°–±–æ—Ä–∫–∞ VoiceX ESP32 –ø—Ä–æ—à–∏–≤–∫–∏..."

cd esp32_firmware

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PlatformIO
if ! command -v pio &> /dev/null; then
    echo "‚ùå PlatformIO –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install platformio"
    exit 1
fi

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
echo "üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è..."
pio run

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
echo "üì° –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏..."
pio run --target upload

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
echo "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ SPIFFS..."
pio run --target uploadfs

echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üîç –û—Ç–∫—Ä–æ–π—Ç–µ Serial Monitor –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo "   pio device monitor"
"""
            
            with open(scripts_dir / "build_and_deploy.sh", 'w') as f:
                f.write(build_script)
            
            # –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_script = """#!/bin/bash
# VoiceX Test Script

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VoiceX —Å–∏—Å—Ç–µ–º—ã..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ESP32
if [ "$1" ]; then
    ESP32_IP=$1
else
    echo "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <ESP32_IP>"
    echo "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: $0 192.168.1.100"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ESP32..."
response=$(curl -s http://$ESP32_IP/status || echo "error")

if [ "$response" == "error" ]; then
    echo "‚ùå ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É $ESP32_IP"
    exit 1
fi

echo "‚úÖ ESP32 –æ—Ç–≤–µ—á–∞–µ—Ç"
echo "$response" | python -m json.tool

# –¢–µ—Å—Ç –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤
echo "üì≥ –¢–µ—Å—Ç –≤–∏–±—Ä–æ–º–æ—Ç–æ—Ä–æ–≤..."
curl -s -X POST http://$ESP32_IP/test

echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
"""
            
            with open(scripts_dir / "test_system.sh", 'w') as f:
                f.write(test_script)
            
            # –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_script = """#!/bin/bash
# VoiceX Monitor Script

ESP32_IP=${1:-"192.168.1.100"}

echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VoiceX —Å–∏—Å—Ç–µ–º—ã: $ESP32_IP"
echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"

while true; do
    clear
    echo "üéôÔ∏è VoiceX System Monitor - $(date)"
    echo "================================"
    
    status=$(curl -s http://$ESP32_IP/status 2>/dev/null || echo '{"error": "no connection"}')
    
    if echo "$status" | grep -q "error"; then
        echo "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ESP32"
    else
        echo "$status" | python -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data.get(\"state\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
    print(f'–ú–æ–¥–µ–ª—å: {\"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞\" if data.get(\"model_loaded\") else \"‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞\"}')
    print(f'–ü–∞–º—è—Ç—å: {data.get(\"free_heap\", 0):,} –±–∞–π—Ç')
    print(f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {data.get(\"uptime\", 0)} —Å–µ–∫')
except:
    print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞')
"
    fi
    
    echo ""
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
    sleep 5
done
"""
            
            with open(scripts_dir / "monitor.sh", 'w') as f:
                f.write(monitor_script)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
            for script in scripts_dir.glob("*.sh"):
                os.chmod(script, 0o755)
            
            print(f"   ‚úÖ –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ {scripts_dir}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
            return False
    
    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        report_content = f"""
# VoiceX Pipeline Execution Report
–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ VoiceX

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- –í—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {self.config['model']['input_dim']}
- –í—ã—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {self.config['model']['output_dim']}
- –≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è: {self.config['model']['epochs']}
- –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.config['model']['batch_size']}
- –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è: {self.config['model']['quantize']}

## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

### –ú–æ–¥–µ–ª–∏
- `models/voicex_model.h5` - –û–±—É—á–µ–Ω–Ω–∞—è Keras –º–æ–¥–µ–ª—å
- `models/voicex_model.tflite` - TensorFlow Lite –º–æ–¥–µ–ª—å
- `models/voicex_model_data.h` - C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
- `models/scaler.pkl` - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
- `models/config.json` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏

### ESP32 –ü—Ä–æ–µ–∫—Ç
- `esp32_firmware/` - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç PlatformIO
- `esp32_firmware/src/main.cpp` - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–æ—à–∏–≤–∫–∏
- `esp32_firmware/data/` - –§–∞–π–ª—ã –¥–ª—è SPIFFS
- `esp32_firmware/platformio.ini` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏

### –î–∞–Ω–Ω—ã–µ –∏ —Ç–µ—Å—Ç—ã
- `datasets/` - –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
- `tests/` - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
- `spiffs_data/` - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SPIFFS

### –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
- `deployment/voicex_deployment.zip` - –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- `scripts/build_and_deploy.sh` - –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
- `scripts/test_system.sh` - –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- `scripts/monitor.sh` - –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

### 1. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
```bash
cd {self.output_dir}/esp32_firmware
pio run --target upload
pio run --target uploadfs
```

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
```bash
pio device monitor
# –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è: "üéâ VoiceX —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
```

### 3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ù–∞–π–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å ESP32 –≤ Serial Monitor
- –û—Ç–∫—Ä–æ–π—Ç–µ http://ESP32_IP –≤ –±—Ä–∞—É–∑–µ—Ä–µ

### 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
```bash
{self.output_dir}/scripts/test_system.sh <ESP32_IP>
```

### 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
```bash
{self.output_dir}/scripts/monitor.sh <ESP32_IP>
```

## –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < 500KB)
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SPIFFS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Serial Monitor

### ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ ESP32

### –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
- –û–±–Ω–æ–≤–∏—Ç–µ PlatformIO: `pio upgrade`
- –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à: `pio run --target clean`
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
- Email: support@voicex.kz
- Telegram: @voicex_support
- GitHub: github.com/voicex/issues

---
–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        report_path = self.output_dir / "PIPELINE_REPORT.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return report_path
    
    def run_full_pipeline(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ VoiceX")
        print("=" * 50)
        
        steps = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö", self.step1_create_demo_data),
            ("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", self.step2_train_model),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", self.step3_test_model),
            ("–°–æ–∑–¥–∞–Ω–∏–µ C++ –∑–∞–≥–æ–ª–æ–≤–∫–∞", self.step4_create_header_file),
            ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SPIFFS", self.step5_create_spiffs_data),
            ("–°–æ–∑–¥–∞–Ω–∏–µ ESP32 –ø—Ä–æ–µ–∫—Ç–∞", self.step6_create_esp32_project),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", self.step7_create_deployment_package),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤", self.step8_generate_build_scripts)
        ]
        
        successful_steps = 0
        failed_steps = []
        
        for step_name, step_func in steps:
            try:
                print(f"\nüìã {step_name}...")
                if step_func():
                    successful_steps += 1
                    print(f"‚úÖ {step_name} - –£–°–ü–ï–®–ù–û")
                else:
                    failed_steps.append(step_name)
                    print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê")
            except Exception as e:
                failed_steps.append(step_name)
                print(f"‚ùå {step_name} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report_path = self.generate_summary_report()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        print("\n" + "=" * 50)
        print("üèÅ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {successful_steps}/{len(steps)}")
        
        if failed_steps:
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —à–∞–≥–æ–≤: {len(failed_steps)}")
            for step in failed_steps:
                print(f"   - {step}")
        else:
            print("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {self.output_dir}")
        print(f"üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report_path}")
        
        return len(failed_steps) == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='VoiceX Complete Pipeline')
    parser.add_argument('--config', type=str, default='pipeline_config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--output_dir', type=str, default='pipeline_output',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--skip_demo_data', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--skip_training', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--demo_only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –¥–µ–º–æ –º–æ–¥–µ–ª—å –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    print("üéôÔ∏è VoiceX Complete Training Pipeline")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline = VoiceXPipeline(args.config)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–∞
        if args.output_dir != 'pipeline_output':
            pipeline.output_dir = Path(args.output_dir)
            pipeline.create_directory_structure()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if args.skip_demo_data:
            pipeline.config['pipeline']['create_demo_data'] = False
        
        if args.skip_training:
            pipeline.config['pipeline']['train_model'] = False
            pipeline.config['pipeline']['test_model'] = False
        
        if args.demo_only:
            # –¢–æ–ª—å–∫–æ –¥–µ–º–æ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            pipeline.config['pipeline']['train_model'] = False
            pipeline.config['pipeline']['test_model'] = False
            pipeline.config['pipeline']['create_demo_data'] = True
        
        # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
        success = pipeline.run_full_pipeline()
        
        if success:
            print("\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. cd pipeline_output/esp32_firmware")
            print("2. pio run --target upload")
            print("3. pio run --target uploadfs")
            print("4. pio device monitor")
            return 0
        else:
            print("\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(main())