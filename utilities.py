#!/usr/bin/env python3
"""
VoiceX ESP32 Utilities
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ ESP32
"""

import os
import json
import shutil
import subprocess
import argparse
from pathlib import Path
import requests
import zipfile
import tempfile

class ESP32ModelUploader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –≤ ESP32"""
    
    def __init__(self, esp32_ip=None, esp32_port="/dev/ttyUSB0"):
        self.esp32_ip = esp32_ip
        self.esp32_port = esp32_port
        
    def prepare_spiffs_data(self, model_dir, spiffs_dir="data"):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SPIFFS"""
        print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö SPIFFS –≤ {spiffs_dir}...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ SPIFFS
        os.makedirs(spiffs_dir, exist_ok=True)
        
        model_dir = Path(model_dir)
        spiffs_dir = Path(spiffs_dir)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        files_to_copy = [
            ("voicex_model.tflite", "model.tflite"),
            ("esp32_config.json", "config.json"),
            ("scaler.pkl", "scaler.pkl")
        ]
        
        for src_name, dst_name in files_to_copy:
            src_path = model_dir / src_name
            dst_path = spiffs_dir / dst_name
            
            if src_path.exists():
                shutil.copy2(src_path, dst_path)
                print(f"   ‚úÖ {src_name} ‚Üí {dst_name}")
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {src_name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        manifest = {
            "version": "1.0",
            "files": [dst_name for _, dst_name in files_to_copy if (spiffs_dir / dst_name).exists()],
            "total_size": sum((spiffs_dir / dst_name).stat().st_size 
                             for _, dst_name in files_to_copy if (spiffs_dir / dst_name).exists()),
            "description": "VoiceX ML Model and Configuration"
        }
        
        with open(spiffs_dir / "manifest.json", 'w') as f:
            json.dump(manifest, f, indent=2)
        
        print(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {manifest['total_size']} –±–∞–π—Ç")
        return spiffs_dir
    
    def upload_via_platformio(self, spiffs_dir="data"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ PlatformIO"""
        print("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ PlatformIO...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PlatformIO
            result = subprocess.run(['pio', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                print("‚ùå PlatformIO –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install platformio")
                return False
            
            print(f"‚úÖ PlatformIO –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {result.stdout.strip()}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            cmd = ['pio', 'run', '--target', 'uploadfs']
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ SPIFFS")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.stderr}")
                return False
                
        except FileNotFoundError:
            print("‚ùå PlatformIO –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def upload_via_web_interface(self, spiffs_dir="data"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ESP32"""
        if not self.esp32_ip:
            print("‚ùå IP –∞–¥—Ä–µ—Å ESP32 –Ω–µ —É–∫–∞–∑–∞–Ω")
            return False
        
        print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://{self.esp32_ip}")
        
        spiffs_dir = Path(spiffs_dir)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        for file_path in spiffs_dir.glob("*"):
            if file_path.is_file():
                try:
                    with open(file_path, 'rb') as f:
                        files = {'file': (file_path.name, f)}
                        response = requests.post(
                            f"http://{self.esp32_ip}/upload",
                            files=files,
                            timeout=30
                        )
                    
                    if response.status_code == 200:
                        print(f"   ‚úÖ {file_path.name}")
                    else:
                        print(f"   ‚ùå {file_path.name}: {response.status_code}")
                        
                except Exception as e:
                    print(f"   ‚ùå {file_path.name}: {e}")
        
        return True
    
    def create_arduino_header(self, model_path, output_path="model_data.h"):
        """–°–æ–∑–¥–∞–Ω–∏–µ C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª–∏"""
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_path}")
        
        with open(model_path, 'rb') as f:
            model_data = f.read()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ C++ –º–∞—Å—Å–∏–≤–∞
        header_content = f"""
#ifndef MODEL_DATA_H
#define MODEL_DATA_H

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª–∏ VoiceX
// –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {len(model_data)} –±–∞–π—Ç

const unsigned char voicex_model_data[] = {{
"""
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –º–æ–¥–µ–ª–∏
        for i, byte in enumerate(model_data):
            if i % 16 == 0:
                header_content += "\n  "
            header_content += f"0x{byte:02x}, "
        
        header_content += f"""
}};

const unsigned int voicex_model_data_len = {len(model_data)};

#endif // MODEL_DATA_H
"""
        
        with open(output_path, 'w') as f:
            f.write(header_content)
        
        print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {len(model_data)} –±–∞–π—Ç")
        return output_path

class PlatformIOProject:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º PlatformIO"""
    
    def __init__(self, project_dir="voicex_esp32"):
        self.project_dir = Path(project_dir)
    
    def create_project(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ PlatformIO"""
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ PlatformIO: {self.project_dir}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        self.project_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ platformio.ini
        platformio_ini = """
[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino

; –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VoiceX
build_flags = 
    -DCORE_DEBUG_LEVEL=3
    -DVOICEX_DEBUG=1

; –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
lib_deps = 
    bblanchon/ArduinoJson@^6.21.3
    https://github.com/tensorflow/tflite-micro-arduino-examples.git

; –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SPIFFS
board_build.partitions = huge_app.csv
board_build.filesystem = spiffs

; –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
monitor_speed = 115200
upload_speed = 921600

; –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
build_unflags = -std=gnu++11
build_flags = -std=gnu++17
"""
        
        with open(self.project_dir / "platformio.ini", 'w') as f:
            f.write(platformio_ini)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        (self.project_dir / "src").mkdir(exist_ok=True)
        (self.project_dir / "data").mkdir(exist_ok=True)
        (self.project_dir / "lib").mkdir(exist_ok=True)
        (self.project_dir / "include").mkdir(exist_ok=True)
        
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç PlatformIO —Å–æ–∑–¥–∞–Ω")
        return self.project_dir
    
    def copy_source_files(self, voicex_cpp_path):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        src_dir = self.project_dir / "src"
        
        if Path(voicex_cpp_path).exists():
            shutil.copy2(voicex_cpp_path, src_dir / "main.cpp")
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def create_deployment_package(model_dir, output_path="voicex_deployment.zip"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {output_path}")
    
    model_dir = Path(model_dir)
    
    with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
        for file_path in model_dir.glob("*"):
            if file_path.is_file():
                zipf.write(file_path, file_path.name)
                print(f"   + {file_path.name}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ README
        readme_content = """
# VoiceX Deployment Package

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:
- voicex_model.tflite - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å TensorFlow Lite
- esp32_config.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ESP32
- scaler.pkl - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
- voicex_model.h5 - –∏—Å—Ö–æ–¥–Ω–∞—è –º–æ–¥–µ–ª—å Keras (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
- training_history.png - –≥—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ ESP32:

### –ú–µ—Ç–æ–¥ 1: PlatformIO
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: `pio run --target uploadfs`

### –ú–µ—Ç–æ–¥ 2: Arduino IDE
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ESP32 Sketch Data Upload
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tools -> ESP32 Sketch Data Upload

### –ú–µ—Ç–æ–¥ 3: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ESP32
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É

## –ü—Ä–æ–≤–µ—Ä–∫–∞:
–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Serial Monitor:
- ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: /model.tflite
- ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
- üìä –¢–∏–ø –º–æ–¥–µ–ª–∏: tflite
- üéØ VoiceX —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º README –≤ –∞—Ä—Ö–∏–≤
        zipf.writestr("README.md", readme_content)
        
    print(f"‚úÖ –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
    return output_path

def verify_esp32_model(esp32_ip=None, esp32_port="/dev/ttyUSB0"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ ESP32"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ ESP32...")
    
    if esp32_ip:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP API
        try:
            response = requests.get(f"http://{esp32_ip}/status", timeout=5)
            if response.status_code == 200:
                status = response.json()
                print("‚úÖ ESP32 –æ—Ç–≤–µ—á–∞–µ—Ç:")
                print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status.get('state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   –ú–æ–¥–µ–ª—å: {status.get('model_loaded', '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')}")
                print(f"   –ü–∞–º—è—Ç—å: {status.get('free_heap', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –±–∞–π—Ç")
                return True
            else:
                print(f"‚ùå ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ESP32: {e}")
            return False
    else:
        print("‚ö†Ô∏è IP –∞–¥—Ä–µ—Å ESP32 –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Serial Monitor")
        return True

def flash_esp32_firmware(firmware_path, esp32_port="/dev/ttyUSB0"):
    """–ü—Ä–æ—à–∏–≤–∫–∞ ESP32"""
    print(f"‚ö° –ü—Ä–æ—à–∏–≤–∫–∞ ESP32 —á–µ—Ä–µ–∑ {esp32_port}...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º esptool –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏
        cmd = [
            'esptool.py',
            '--port', esp32_port,
            '--baud', '921600',
            'write_flash',
            '0x1000', firmware_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå esptool.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install esptool")
        return False

def create_web_interface_files(output_dir="web_interface"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è ESP32"""
    print(f"üåê –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ {output_dir}...")
    
    os.makedirs(output_dir, exist_ok=True)
    
    # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    html_content = """
<!DOCTYPE html>
<html>
<head>
    <title>VoiceX ESP32 Interface</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
        .status { padding: 15px; margin: 20px 0; border-radius: 5px; }
        .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .upload-area { border: 2px dashed #ccc; padding: 40px; text-align: center; margin: 20px 0; }
        .upload-area:hover { border-color: #007bff; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #0056b3; }
        .file-list { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéôÔ∏è VoiceX ESP32 Control Panel</h1>
        
        <div id="status" class="status">
            –°–æ—Å—Ç–æ—è–Ω–∏–µ: <span id="statusText">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
        </div>
        
        <h2>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏</h2>
        <div class="upload-area" id="uploadArea">
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
            <input type="file" id="fileInput" multiple style="display: none;">
            <button onclick="document.getElementById('fileInput').click()">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã</button>
        </div>
        
        <div id="fileList" class="file-list" style="display: none;">
            <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>
            <ul id="files"></ul>
            <button onclick="uploadFiles()">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ ESP32</button>
        </div>
        
        <h2>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h2>
        <button onclick="restartSystem()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
        <button onclick="testVoice()">üé§ –¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞</button>
        <button onclick="downloadLogs()">üìã –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏</button>
        
        <h2>üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        <div id="systemInfo">
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ESP32
        function checkStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('statusText').textContent = data.state || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    document.getElementById('status').className = 
                        'status ' + (data.model_loaded ? 'success' : 'error');
                    updateSystemInfo(data);
                })
                .catch(error => {
                    document.getElementById('statusText').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                    document.getElementById('status').className = 'status error';
                });
        }
        
        function updateSystemInfo(data) {
            document.getElementById('systemInfo').innerHTML = `
                <p><strong>–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:</strong> ${data.model_loaded ? '–î–∞' : '–ù–µ—Ç'}</p>
                <p><strong>–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å:</strong> ${data.free_heap} –±–∞–π—Ç</p>
                <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${data.uptime} —Å–µ–∫</p>
                <p><strong>–í–µ—Ä—Å–∏—è:</strong> ${data.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            `;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        document.getElementById('fileInput').addEventListener('change', handleFiles);
        
        function handleFiles(event) {
            const files = event.target.files;
            if (files.length > 0) {
                const fileList = document.getElementById('files');
                fileList.innerHTML = '';
                
                for (let file of files) {
                    const li = document.createElement('li');
                    li.textContent = `${file.name} (${file.size} –±–∞–π—Ç)`;
                    fileList.appendChild(li);
                }
                
                document.getElementById('fileList').style.display = 'block';
            }
        }
        
        function uploadFiles() {
            const files = document.getElementById('fileInput').files;
            const formData = new FormData();
            
            for (let file of files) {
                formData.append('files', file);
            }
            
            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                alert(data.success ? '–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!' : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + data.error);
                checkStatus();
            })
            .catch(error => alert('–û—à–∏–±–∫–∞: ' + error));
        }
        
        function restartSystem() {
            if (confirm('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?')) {
                fetch('/restart', { method: 'POST' })
                    .then(() => {
                        alert('–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
                        setTimeout(checkStatus, 5000);
                    });
            }
        }
        
        function testVoice() {
            fetch('/test', { method: 'POST' })
                .then(response => response.json())
                .then(data => alert(data.message || '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω'));
        }
        
        function downloadLogs() {
            window.open('/logs', '_blank');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        checkStatus();
        setInterval(checkStatus, 5000);
    </script>
</body>
</html>
"""
    
    with open(os.path.join(output_dir, "index.html"), 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω")
    return output_dir

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç–∏–ª–∏—Ç"""
    parser = argparse.ArgumentParser(description='VoiceX ESP32 Utilities')
    parser.add_argument('--action', type=str, required=True,
                       choices=['prepare', 'upload', 'verify', 'package', 'project', 'web'],
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--model_dir', type=str, default='./models',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—å—é')
    parser.add_argument('--spiffs_dir', type=str, default='./data',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è SPIFFS –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--esp32_ip', type=str,
                       help='IP –∞–¥—Ä–µ—Å ESP32 –¥–ª—è –≤–µ–±-–∑–∞–≥—Ä—É–∑–∫–∏')
    parser.add_argument('--esp32_port', type=str, default='/dev/ttyUSB0',
                       help='–ü–æ—Ä—Ç ESP32 –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏')
    parser.add_argument('--output', type=str,
                       help='–ü—É—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ (–ø–∞–∫–µ—Ç, –ø—Ä–æ–µ–∫—Ç –∏ —Ç.–¥.)')
    parser.add_argument('--cpp_file', type=str,
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É main.cpp –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ PlatformIO')
    
    args = parser.parse_args()
    
    print("üîß VoiceX ESP32 Utilities")
    print("=" * 40)
    
    uploader = ESP32ModelUploader(args.esp32_ip, args.esp32_port)
    
    if args.action == 'prepare':
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö SPIFFS
        spiffs_dir = uploader.prepare_spiffs_data(args.model_dir, args.spiffs_dir)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ {spiffs_dir}")
        
    elif args.action == 'upload':
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ ESP32
        spiffs_dir = uploader.prepare_spiffs_data(args.model_dir, args.spiffs_dir)
        
        if args.esp32_ip:
            success = uploader.upload_via_web_interface(spiffs_dir)
        else:
            success = uploader.upload_via_platformio(spiffs_dir)
        
        if success:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            
    elif args.action == 'verify':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ ESP32
        verify_esp32_model(args.esp32_ip, args.esp32_port)
        
    elif args.action == 'package':
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        output_path = args.output or "voicex_deployment.zip"
        create_deployment_package(args.model_dir, output_path)
        
    elif args.action == 'project':
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ PlatformIO
        project_dir = args.output or "voicex_esp32"
        project = PlatformIOProject(project_dir)
        project.create_project()
        
        if args.cpp_file:
            project.copy_source_files(args.cpp_file)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        spiffs_dir = project.project_dir / "data"
        uploader.prepare_spiffs_data(args.model_dir, spiffs_dir)
        
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç PlatformIO —Å–æ–∑–¥–∞–Ω –≤ {project_dir}")
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. cd {project_dir}")
        print("   2. pio run")
        print("   3. pio run --target upload")
        print("   4. pio run --target uploadfs")
        
    elif args.action == 'web':
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        web_dir = args.output or "web_interface"
        create_web_interface_files(web_dir)
        
    print("=" * 40)
    print("üéâ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()