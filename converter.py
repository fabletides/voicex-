#!/usr/bin/env python3
"""
VoiceX Model to Header Converter
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .tflite –º–æ–¥–µ–ª—å –≤ C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ ESP32
"""

import argparse
import os
from pathlib import Path
import json
from datetime import datetime

def convert_tflite_to_header(tflite_path, output_path, var_name="voicex_model"):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .tflite —Ñ–∞–π–ª –≤ C++ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {tflite_path} –≤ {output_path}")
    
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
    with open(tflite_path, 'rb') as f:
        model_data = f.read()
    
    model_size = len(model_data)
    print(f"üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size} –±–∞–π—Ç ({model_size/1024:.2f} KB)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (ESP32 –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    if model_size > 500000:  # 500KB
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–æ–¥–µ–ª—å –±–æ–ª—å—à–µ 500KB, –º–æ–∂–µ—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ ESP32")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    header_content = generate_header_content(model_data, var_name, tflite_path)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with open(output_path, 'w') as f:
        f.write(header_content)
    
    print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
    print(f"üìù –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {model_size} –±–∞–π—Ç")
    
    return output_path

def generate_header_content(model_data, var_name, source_path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ C++ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    model_size = len(model_data)
    guard_name = f"{var_name.upper()}_H"
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
    source_file = Path(source_path)
    creation_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    header = f'''#ifndef {guard_name}
#define {guard_name}

/*
 * VoiceX TensorFlow Lite Model Data
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑: {source_file.name}
 * –†–∞–∑–º–µ—Ä: {model_size} –±–∞–π—Ç ({model_size/1024:.2f} KB)
 * –°–æ–∑–¥–∞–Ω–æ: {creation_date}
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   #include "{source_file.stem}_data.h"
 *   const tflite::Model* model = tflite::GetModel({var_name}_data);
 */

#include <stdint.h>

// –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
const unsigned int {var_name}_len = {model_size};

// –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
alignas(8) const unsigned char {var_name}_data[] = {{
'''
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    for i, byte in enumerate(model_data):
        if i % 12 == 0:
            header += '\n  '
        header += f'0x{byte:02x}, '
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
    header = header.rstrip(', ') + '\n};\n\n'
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    helper_functions = f'''// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const unsigned char* get_{var_name}_data() {{
    return {var_name}_data;
}}

unsigned int get_{var_name}_size() {{
    return {var_name}_len;
}}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ TensorFlow Lite
bool validate_{var_name}() {{
    if ({var_name}_len < 8) return false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –±–∞–π—Ç–æ–≤ TFLite
    const char* magic = "TFL3";
    for (int i = 0; i < 4; i++) {{
        if ({var_name}_data[i + 4] != magic[i]) {{
            return false;
        }}
    }}
    return true;
}}

// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
struct {var_name.title()}Metadata {{
    const char* source_file = "{source_file.name}";
    const char* created_date = "{creation_date}";
    unsigned int size_bytes = {model_size};
    float size_kb = {model_size/1024:.2f}f;
    const char* description = "VoiceX TensorFlow Lite model for voice personalization";
    const char* version = "1.0.0";
}};

extern const {var_name.title()}Metadata {var_name}_metadata;
const {var_name.title()}Metadata {var_name}_metadata = {{}};

#endif // {guard_name}
'''
    
    return header + helper_functions

def create_demo_model():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ TensorFlow Lite –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    try:
        import tensorflow as tf
        import numpy as np
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ TensorFlow Lite –º–æ–¥–µ–ª–∏...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å autoencoder
        model = tf.keras.Sequential([
            tf.keras.layers.Dense(256, activation='relu', input_shape=(512,)),
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dense(64, activation='relu'),
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dense(256, activation='linear')
        ])
        
        model.compile(optimizer='adam', loss='mse')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è representative dataset
        def representative_dataset():
            for _ in range(100):
                yield [np.random.random((1, 512)).astype(np.float32)]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TFLite —Å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        converter.representative_dataset = representative_dataset
        converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
        converter.inference_input_type = tf.int8
        converter.inference_output_type = tf.int8
        
        tflite_model = converter.convert()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        demo_path = "demo_voicex_model.tflite"
        with open(demo_path, 'wb') as f:
            f.write(tflite_model)
        
        print(f"‚úÖ –î–µ–º–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {demo_path} ({len(tflite_model)} –±–∞–π—Ç)")
        return demo_path
        
    except ImportError:
        print("‚ùå TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –º–æ–¥–µ–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return None

def verify_header_file(header_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {header_path}")
    
    try:
        with open(header_path, 'r') as f:
            content = f.read()
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ('#ifndef' in content, "Include guard"),
            ('#define' in content, "Define guard"),
            ('const unsigned char' in content, "Data array"),
            ('const unsigned int' in content, "Size variable"),
            ('0x' in content, "Hex data"),
            ('#endif' in content, "End guard")
        ]
        
        all_passed = True
        for check, description in checks:
            if check:
                print(f"   ‚úÖ {description}")
            else:
                print(f"   ‚ùå {description}")
                all_passed = False
        
        if all_passed:
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            print("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def create_build_instructions(output_path, header_file):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ –¥–ª—è ESP32"""
    
    instructions = f"""
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ –≤ ESP32

## 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
```bash
cp {header_file} esp32_firmware/src/
```

## 2. –í–∫–ª—é—á–∏—Ç–µ –≤ main.cpp
```cpp
#include "{Path(header_file).name}"

// –í —Ñ—É–Ω–∫—Ü–∏–∏ load_tflite_model() –∑–∞–º–µ–Ω–∏—Ç–µ:
// tflite_model = tflite::GetModel(model_data);
// –Ω–∞:
tflite_model = tflite::GetModel(voicex_model_data);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏:
if (!validate_voicex_model()) {{
    Serial.println("‚ùå –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞");
    return false;
}}
```

## 3. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
```cpp
// –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏
#define MODEL_SIZE {Path(header_file).stat().st_size if Path(header_file).exists() else 'XXX'}
#define TENSOR_ARENA_SIZE 60000  // –£–≤–µ–ª–∏—á—å—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
```

## 4. –ö–æ–º–ø–∏–ª—è—Ü–∏—è
```bash
cd esp32_firmware
pio run
pio run --target upload
```

## 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Serial Monitor
–î–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å:
```
‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è
üìä –¢–∏–ø –º–æ–¥–µ–ª–∏: tflite
üéØ –í—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: [1, 512]
üéØ –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: [1, 256]
```

## –ó–∞–º–µ—á–∞–Ω–∏—è
- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—à–∏–≤–∫–∏
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ SPIFFS
- –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∞
"""
    
    instructions_path = output_path.replace('.h', '_instructions.md')
    with open(instructions_path, 'w') as f:
        f.write(instructions)
    
    print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {instructions_path}")
    return instructions_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä TFLite –º–æ–¥–µ–ª–∏ –≤ C++ –∑–∞–≥–æ–ª–æ–≤–æ–∫')
    parser.add_argument('--model', type=str, 
                       help='–ü—É—Ç—å –∫ .tflite –º–æ–¥–µ–ª–∏')
    parser.add_argument('--output', type=str, default='voicex_model_data.h',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π .h —Ñ–∞–π–ª')
    parser.add_argument('--var_name', type=str, default='voicex_model',
                       help='–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ C++')
    parser.add_argument('--create_demo', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –º–æ–¥–µ–ª—å –µ—Å–ª–∏ TensorFlow –¥–æ—Å—Ç—É–ø–µ–Ω')
    parser.add_argument('--verify', action='store_true',
                       help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    print("üîß VoiceX Model to Header Converter")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.create_demo:
        demo_model = create_demo_model()
        if demo_model and not args.model:
            args.model = demo_model
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not args.model:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --model –ø—É—Ç—å/–∫/–º–æ–¥–µ–ª–∏.tflite")
        print("üí° –ò–ª–∏ --create_demo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        return 1
    
    if not os.path.exists(args.model):
        print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.model}")
        return 1
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    try:
        header_file = convert_tflite_to_header(
            args.model, 
            args.output, 
            args.var_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.verify:
            verify_header_file(header_file)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        create_build_instructions(args.output, header_file)
        
        print("=" * 40)
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª: {header_file}")
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {args.output.replace('.h', '_instructions.md')}")
        print("")
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. cp {header_file} esp32_firmware/src/")
        print(f"   2. –í–∫–ª—é—á–∏—Ç–µ #{args.var_name}_data.h –≤ main.cpp")
        print("   3. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ SPIFFS –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("   4. –ö–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(main())